@import "~@angular/material/theming";

$app-pallette: (
    50: #201830,
    100: #00ffcb,
    200: #9fa8da,
    300: #7986cb,
    400: #5c6bc0,
    500: #333366,
    600: #3949ab,
    700: #303f9f,
    800: #283593,
    900: #1a237e,
    A100: #8c9eff,
    A200: #536dfe,
    A400: #3d5afe,
    A700: #304ffe,
    contrast: (
        50: white,
        100: white,
        200: black,
        300: white,
        400: white,
        500: white,
        600: white,
        700: white,
        800: white,
        900: white,
        A100: black,
        A200: white,
        A400: white,
        A700: white
    )
);

// custom background and foreground palettes
$my-theme-background: (
    status-bar: black,
    app-bar: map_get($mat-grey, 900),
    background: #303030,
    hover: rgba(white, 0.04),
    dialog: map_get($mat-grey, 800),
    disabled-button: rgba(white, 0.12),
    raised-button: map-get($mat-grey, 800),
    focused-button: $light-focused,
    selected-button: map_get($mat-grey, 900),
    selected-disabled-button: map_get($mat-grey, 800),
    disabled-button-toggle: black,
    unselected-chip: map_get($mat-grey, 700),
    disabled-list-option: black
);

$my-theme-foreground: (
    base: white,
    divider: $light-dividers,
    dividers: $light-dividers,
    disabled: $light-disabled-text,
    disabled-button: rgba(white, 0.3),
    disabled-text: $light-disabled-text,
    elevation: black,
    hint-text: $light-disabled-text,
    secondary-text: $light-secondary-text,
    icon: white,
    icons: white,
    text: black,
    slider-min: white,
    slider-off: rgba(white, 0.3),
    slider-off-active: rgba(white, 0.3)
);

// instead of creating a theme with mat-light-theme like a sane person, we will create our own theme-creating function that lets us apply our own foreground and background palettes.
@function create-my-theme($primary, $accent, $warn: mat-palette($mat-red)) {
    @return (
        primary: $primary,
        accent: $accent,
        warn: $warn,
        is-dark: false,
        foreground: $my-theme-foreground,
        background: $my-theme-background
    );
}

@mixin toolbar-color($palette) {
    background: mat-color($palette);
    //color: mat-color($palette, default-contrast);
}

@mixin app-component-theme($theme) {
    // retrieve variables from theme
    // (all possible variables, use only what you really need)

    $primary: map-get($theme, primary);
    $accent: map-get($theme, accent);
    $warn: map-get($theme, warn);
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    .my-theme {
        .mat-mini-fab {
            color: mat-color($foreground, text) !important;

            &.mat-warn {
                color: mat-color($foreground, text) !important;
            }
        }
    }
}

@mixin sidenav-component-theme($theme) {
    // retrieve variables from theme
    // (all possible variables, use only what you really need)

    $primary: map-get($theme, primary);
    $accent: map-get($theme, accent);
    $warn: map-get($theme, warn);
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    .mat-drawer {
        // let's take mat-toolbar's default theme
        // ref: https://github.com/angular/material2/blob/88601fa51d581f538468a9b63890b0e285e519cb/src/lib/toolbar/_toolbar-theme.scss#L39
        background-color: mat-color($background, app-bar);
        color: mat-color($foreground, text);

        // now, mat-toolbar's colored themes
        &[color="primary"] {
            @include toolbar-color($primary);
        }
        &[color="accent"] {
            @include toolbar-color($accent);
        }
        &[color="warn"] {
            @include toolbar-color($warn);
        }
    }
}

@mixin dialog-component-theme($theme) {
    // retrieve variables from theme
    // (all possible variables, use only what you really need)

    $primary: map-get($theme, primary);
    $accent: map-get($theme, accent);
    $warn: map-get($theme, warn);
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);
    .custom-dialog {
        max-width: none !important;
        .mat-dialog-container {
            padding: 0;
            background-color: map-get($app-pallette, 50);

            .mat-dialog-title {
                margin-bottom: 0;
                // let's take mat-toolbar's default theme
                background-color: mat-color($background, app-bar);
                color: mat-color($foreground, base);
                // now, mat-toolbar's colored themes
                &[color="primary"] {
                    @include toolbar-color($primary);
                }
                &[color="accent"] {
                    @include toolbar-color($accent);
                }
                &[color="warn"] {
                    @include toolbar-color($warn);
                }
            }
        }
    }
}

@mixin notification-theme($my-theme-info, $my-theme-success, $my-theme-warning, $my-theme-error) {
    .success-notification-overlay,
    .info-notification-overlay,
    .warning-notification-overlay,
    .error-notification-overlay,
    .default-notification-overlay {
        border-left: 4px solid;
        &::before {
            font-family: "Material Icons";
            float: left;
            font-size: 24px;
            // because we want spaces to be considered in content
            // https://stackoverflow.com/questions/5467605/add-a-space-after-an-element-using-after
            white-space: pre;
        }
    }
    .success-notification-overlay {
        border-left-color: mat-color($my-theme-success, 400);
        &::before {
            content: "\e86c  ";
            color: mat-color($my-theme-success, 400);
        }
    }
    .info-notification-overlay {
        border-left-color: mat-color($my-theme-info, 400);
        &::before {
            content: "\e88e  ";
            color: mat-color($my-theme-info, 400);
        }
    }
    .default-notification-overlay {
        border-left-color: #fff;
        &::before {
            color: #fff;
        }
    }
    .warning-notification-overlay {
        border-left-color: mat-color($my-theme-warning, 400);
        &::before {
            color: mat-color($my-theme-warning, 400);
        }
    }
    .error-notification-overlay {
        border-left-color: mat-color($my-theme-error, 400);
        &::before {
            color: mat-color($my-theme-error, 400);
        }
    }
    .warning-notification-overlay::before {
        content: "\e002  ";
    }
    .error-notification-overlay::before {
        content: "\e000  ";
    }
}

// $my-typography: mat-typography-config(
//     $font-family: "Nunito Sans"
// );

// @include mat-core($my-typography);

// themes for notifications
$my-theme-info: mat-palette($mat-blue);
$my-theme-success: mat-palette($mat-green);
$my-theme-warning: mat-palette($mat-orange);
$my-theme-error: mat-palette($mat-red);

// The rest of this is like a normal theme.scss file. The only difference being that we use create-my-theme instead of mat-light-theme
$my-theme-primary: mat-palette($app-pallette, 50);
$my-theme-accent: mat-palette($app-pallette, 100);
$my-theme-warn: mat-palette($mat-red);

$my-theme: create-my-theme($my-theme-primary, $my-theme-accent, $my-theme-warn);

@mixin custom-components-theme($theme, $theme-info, $theme-success, $theme-warnig, $theme-error) {
    @include app-component-theme($theme);
    @include sidenav-component-theme($theme);
    @include dialog-component-theme($theme);
    @include notification-theme($theme-info, $theme-success, $theme-warnig, $theme-error);
}

// specify theme class eg: <body class="my-theme"> ... </body>
.my-light-theme {
    // use our theme with angular-material-theme mixin
    @include angular-material-theme($my-theme);

    @include custom-components-theme($my-theme, $my-theme-info, $my-theme-success, $my-theme-warning, $my-theme-error);
    .mat-ripple {
        background-color: transparent !important;
    }

    .mat-progress-bar.mat-accent .mat-progress-bar-buffer {
        background-color: #13101a !important;
    }

    .mat-form-field {
        .mat-select-value-text {
            color: white !important;
        }

        input {
            color: white;
            caret-color: white;
        }

        &.mat-focused {
            .mat-form-field-label {
                color: map-get($app-pallette, 100) !important;
            }
    
            .mat-form-field-underline,
            .mat-form-field-ripple  {
                background-color: map-get($app-pallette, 100) !important;
            }
        }
    }
}
